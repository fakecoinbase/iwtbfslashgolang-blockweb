// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/dns_seed/farmer.proto

package dns_seed

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SeedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedRequest) Reset()         { *m = SeedRequest{} }
func (m *SeedRequest) String() string { return proto.CompactTextString(m) }
func (*SeedRequest) ProtoMessage()    {}
func (*SeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30ed70026068809, []int{0}
}

func (m *SeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeedRequest.Unmarshal(m, b)
}
func (m *SeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeedRequest.Marshal(b, m, deterministic)
}
func (m *SeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedRequest.Merge(m, src)
}
func (m *SeedRequest) XXX_Size() int {
	return xxx_messageInfo_SeedRequest.Size(m)
}
func (m *SeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeedRequest proto.InternalMessageInfo

type SeedReply struct {
	Seed                 string   `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedReply) Reset()         { *m = SeedReply{} }
func (m *SeedReply) String() string { return proto.CompactTextString(m) }
func (*SeedReply) ProtoMessage()    {}
func (*SeedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30ed70026068809, []int{1}
}

func (m *SeedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeedReply.Unmarshal(m, b)
}
func (m *SeedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeedReply.Marshal(b, m, deterministic)
}
func (m *SeedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedReply.Merge(m, src)
}
func (m *SeedReply) XXX_Size() int {
	return xxx_messageInfo_SeedReply.Size(m)
}
func (m *SeedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedReply.DiscardUnknown(m)
}

var xxx_messageInfo_SeedReply proto.InternalMessageInfo

func (m *SeedReply) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func init() {
	proto.RegisterType((*SeedRequest)(nil), "dns_seed.SeedRequest")
	proto.RegisterType((*SeedReply)(nil), "dns_seed.SeedReply")
}

func init() { proto.RegisterFile("proto/dns_seed/farmer.proto", fileDescriptor_d30ed70026068809) }

var fileDescriptor_d30ed70026068809 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xc9, 0x2b, 0x8e, 0x2f, 0x4e, 0x4d, 0x4d, 0xd1, 0x4f, 0x4b, 0x2c, 0xca, 0x4d,
	0x2d, 0xd2, 0x03, 0x8b, 0x0a, 0x71, 0xc0, 0x84, 0x95, 0x78, 0xb9, 0xb8, 0x83, 0x53, 0x53, 0x53,
	0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0xe4, 0xb9, 0x38, 0x21, 0xdc, 0x82, 0x9c, 0x4a,
	0x21, 0x21, 0x2e, 0x16, 0x90, 0x1a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0xdb, 0xc8,
	0x95, 0x8b, 0xcd, 0x0d, 0x6c, 0x92, 0x90, 0x35, 0x17, 0x37, 0x54, 0x17, 0x48, 0x87, 0x90, 0xa8,
	0x1e, 0xcc, 0x4c, 0x3d, 0x24, 0x03, 0xa5, 0x84, 0xd1, 0x85, 0x0b, 0x72, 0x2a, 0x95, 0x18, 0x9c,
	0x84, 0xa3, 0x04, 0x33, 0xf3, 0x4a, 0x52, 0x8b, 0xf2, 0x12, 0x73, 0xe0, 0x4e, 0x4c, 0x62, 0x03,
	0x3b, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xd4, 0x62, 0x67, 0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FarmerClient is the client API for Farmer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FarmerClient interface {
	RequestSeed(ctx context.Context, in *SeedRequest, opts ...grpc.CallOption) (*SeedReply, error)
}

type farmerClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmerClient(cc grpc.ClientConnInterface) FarmerClient {
	return &farmerClient{cc}
}

func (c *farmerClient) RequestSeed(ctx context.Context, in *SeedRequest, opts ...grpc.CallOption) (*SeedReply, error) {
	out := new(SeedReply)
	err := c.cc.Invoke(ctx, "/dns_seed.Farmer/RequestSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmerServer is the server API for Farmer service.
type FarmerServer interface {
	RequestSeed(context.Context, *SeedRequest) (*SeedReply, error)
}

// UnimplementedFarmerServer can be embedded to have forward compatible implementations.
type UnimplementedFarmerServer struct {
}

func (*UnimplementedFarmerServer) RequestSeed(ctx context.Context, req *SeedRequest) (*SeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSeed not implemented")
}

func RegisterFarmerServer(s *grpc.Server, srv FarmerServer) {
	s.RegisterService(&_Farmer_serviceDesc, srv)
}

func _Farmer_RequestSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServer).RequestSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_seed.Farmer/RequestSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServer).RequestSeed(ctx, req.(*SeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Farmer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dns_seed.Farmer",
	HandlerType: (*FarmerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestSeed",
			Handler:    _Farmer_RequestSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dns_seed/farmer.proto",
}
