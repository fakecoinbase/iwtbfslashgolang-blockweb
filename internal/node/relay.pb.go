// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/node/relay.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Version struct {
	Version              int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BestHeight           uint64   `protobuf:"varint,2,opt,name=bestHeight,proto3" json:"bestHeight,omitempty"`
	AddressFrom          string   `protobuf:"bytes,3,opt,name=addressFrom,proto3" json:"addressFrom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_33615706ef1962af, []int{0}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Version) GetBestHeight() uint64 {
	if m != nil {
		return m.BestHeight
	}
	return 0
}

func (m *Version) GetAddressFrom() string {
	if m != nil {
		return m.AddressFrom
	}
	return ""
}

func init() {
	proto.RegisterType((*Version)(nil), "dns_seed.Version")
}

func init() { proto.RegisterFile("proto/node/relay.proto", fileDescriptor_33615706ef1962af) }

var fileDescriptor_33615706ef1962af = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x2f, 0x4a, 0xcd, 0x49, 0xac, 0xd4, 0x03, 0x0b, 0x08,
	0x71, 0xa4, 0xe4, 0x15, 0xc7, 0x17, 0xa7, 0xa6, 0xa6, 0x28, 0xa5, 0x72, 0xb1, 0x87, 0xa5, 0x16,
	0x15, 0x67, 0xe6, 0xe7, 0x09, 0x49, 0x70, 0xb1, 0x97, 0x41, 0x98, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0xac, 0x41, 0x30, 0xae, 0x90, 0x1c, 0x17, 0x57, 0x52, 0x6a, 0x71, 0x89, 0x47, 0x6a, 0x66, 0x7a,
	0x46, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x92, 0x88, 0x90, 0x02, 0x17, 0x77, 0x62,
	0x4a, 0x4a, 0x51, 0x6a, 0x71, 0xb1, 0x5b, 0x51, 0x7e, 0xae, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67,
	0x10, 0xb2, 0x90, 0x91, 0x13, 0x17, 0x6b, 0x10, 0xc8, 0x7e, 0x21, 0x4b, 0x2e, 0x7e, 0xd7, 0x8a,
	0xe4, 0x8c, 0xc4, 0xbc, 0xf4, 0x54, 0x98, 0xbd, 0x82, 0x7a, 0x30, 0xd7, 0xe8, 0x41, 0x85, 0xa4,
	0x30, 0x85, 0x94, 0x18, 0x9c, 0xf8, 0xa3, 0x78, 0x33, 0xf3, 0x4a, 0x52, 0x8b, 0xf2, 0x12, 0x73,
	0xc0, 0x3e, 0x4a, 0x62, 0x03, 0x7b, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xed, 0x18, 0x4b,
	0x39, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayClient interface {
	ExchangeVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) ExchangeVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/dns_seed.Relay/ExchangeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServer is the server API for Relay service.
type RelayServer interface {
	ExchangeVersion(context.Context, *Version) (*Version, error)
}

// UnimplementedRelayServer can be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (*UnimplementedRelayServer) ExchangeVersion(ctx context.Context, req *Version) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeVersion not implemented")
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_ExchangeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).ExchangeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_seed.Relay/ExchangeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).ExchangeVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dns_seed.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeVersion",
			Handler:    _Relay_ExchangeVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/node/relay.proto",
}
